"""
Enhanced Command-Line Interface for Spotify App Agent Template

This script provides a comprehensive CLI for managing the Spotify bot,
including interactive setup, configuration management, and bot control.

LEARNING OBJECTIVES:
- Understand command-line interface development
- Learn about interactive user interfaces
- Practice working with configuration management
- Understand CLI design patterns and best practices
- Learn about command-line argument parsing and validation
"""

import os
import sys
import json
import yaml
import sqlite3
import argparse
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
import getpass
import webbrowser
from typing import Dict, List, Optional, Any

# Add the app directory to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'app'))

from spotify_client import SpotifyClient

class SpotifyCLI:
    """
    Enhanced command-line interface for Spotify bot management.
    
    This class provides a comprehensive CLI for setting up, configuring,
    and managing the Spotify bot with interactive features.
    """
    
    def __init__(self):
        """Initialize the CLI system."""
        self.config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'config.yaml')
        self.env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
        self.db_path = os.path.join(os.path.dirname(__file__), '..', 'state', 'bot_state.db')
        self.config = self._load_config()
        
        # Ensure database exists
        self._ensure_database_exists()
        
        # Initialize Spotify client
        try:
            self.spotify_client = SpotifyClient()
            self.spotify_client.authenticate()
        except Exception as e:
            self.spotify_client = None
    
    def _load_config(self) -> Dict[str, Any]:
        """Load configuration from YAML file."""
        try:
            with open(self.config_path, 'r') as f:
                return yaml.safe_load(f)
        except Exception as e:
            print(f"‚ùå Error loading config: {e}")
            return {}
    
    def _save_config(self, config: Dict[str, Any]) -> bool:
        """Save configuration to YAML file."""
        try:
            with open(self.config_path, 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            return True
        except Exception as e:
            print(f"‚ùå Error saving config: {e}")
            return False
    
    def _load_env(self) -> Dict[str, str]:
        """Load environment variables from .env file."""
        env_vars = {}
        try:
            if os.path.exists(self.env_path):
                with open(self.env_path, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            env_vars[key] = value
        except Exception as e:
            print(f"‚ùå Error loading .env file: {e}")
        return env_vars
    
    def _save_env(self, env_vars: Dict[str, str]) -> bool:
        """Save environment variables to .env file."""
        try:
            with open(self.env_path, 'w') as f:
                f.write("# Spotify App Agent Template Environment Configuration\n")
                f.write("# Generated by CLI setup\n\n")
                for key, value in env_vars.items():
                    f.write(f"{key}={value}\n")
            return True
        except Exception as e:
            print(f"‚ùå Error saving .env file: {e}")
            return False
    
    def _ensure_database_exists(self):
        """Ensure database exists and is properly initialized."""
        try:
            # Create state directory if it doesn't exist
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            # Check if database exists and has tables
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Check if bot_runs table exists
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='bot_runs'")
            if not cursor.fetchone():
                print("üóÑÔ∏è  Database not initialized, creating tables...")
                self._create_database_tables(cursor)
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå Error ensuring database exists: {e}")
    
    def _create_database_tables(self, cursor):
        """Create database tables."""
        # Create bot_runs table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_runs (
                run_id INTEGER PRIMARY KEY AUTOINCREMENT,
                playlist_type TEXT NOT NULL,
                start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                end_time DATETIME,
                status TEXT DEFAULT 'running',
                tracks_added INTEGER DEFAULT 0,
                tracks_removed INTEGER DEFAULT 0,
                error_message TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Create playlist_snapshots table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS playlist_snapshots (
                snapshot_id INTEGER PRIMARY KEY AUTOINCREMENT,
                playlist_id TEXT NOT NULL,
                playlist_type TEXT NOT NULL,
                snapshot_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                track_count INTEGER DEFAULT 0,
                total_duration INTEGER DEFAULT 0,
                avg_popularity REAL DEFAULT 0,
                genres TEXT,
                artists TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Create track_history table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS track_history (
                history_id INTEGER PRIMARY KEY AUTOINCREMENT,
                track_id TEXT NOT NULL,
                track_name TEXT NOT NULL,
                artist_name TEXT NOT NULL,
                popularity INTEGER DEFAULT 0,
                added_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                playlist_type TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Create indexes
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_bot_runs_start_time ON bot_runs(start_time)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_bot_runs_status ON bot_runs(status)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_playlist_snapshots_time ON playlist_snapshots(snapshot_time)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_playlist_snapshots_type ON playlist_snapshots(playlist_type)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_track_history_date ON track_history(added_date)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_track_history_playlist ON track_history(playlist_type)')
        
        print("‚úÖ Database tables created successfully!")
    
    def setup_interactive(self):
        """Interactive setup wizard for the bot."""
        print("üéµ Spotify App Agent Template - Interactive Setup")
        print("=" * 60)
        print()
        
        # Step 1: Bot Persona
        print("ü§ñ Step 1: Configure Your Bot's Persona")
        print("-" * 40)
        
        bot_name = input("Enter your bot's name: ").strip()
        if not bot_name:
            bot_name = "My Music Bot"
        
        bot_prefix = input("Enter your bot's playlist prefix (e.g., 'My Bot's '): ").strip()
        if not bot_prefix:
            bot_prefix = "My Bot's "
        
        bot_bio = input("Enter your bot's description: ").strip()
        if not bot_bio:
            bot_bio = "Automated music curation bot"
        
        # Step 2: Spotify Credentials
        print("\nüîê Step 2: Spotify API Credentials")
        print("-" * 40)
        print("You'll need to create a Spotify app at: https://developer.spotify.com/dashboard")
        print()
        
        client_id = input("Enter your Spotify Client ID: ").strip()
        if not client_id:
            print("‚ùå Client ID is required")
            return False
        
        client_secret = getpass.getpass("Enter your Spotify Client Secret: ").strip()
        if not client_secret:
            print("‚ùå Client Secret is required")
            return False
        
        user_id = input("Enter your Spotify User ID: ").strip()
        if not user_id:
            print("‚ùå User ID is required")
            return False
        
        # Step 3: Generate Refresh Token
        print("\nüîÑ Step 3: Generate Refresh Token")
        print("-" * 40)
        print("We need to generate a refresh token for API access.")
        
        choice = input("Generate refresh token now? (y/N): ").strip().lower()
        if choice == 'y':
            refresh_token = self._generate_refresh_token(client_id, client_secret)
            if not refresh_token:
                print("‚ùå Failed to generate refresh token")
                return False
        else:
            refresh_token = input("Enter your refresh token: ").strip()
            if not refresh_token:
                print("‚ùå Refresh token is required")
                return False
        
        # Step 4: Playlist Configuration
        print("\nüìã Step 4: Playlist Configuration")
        print("-" * 40)
        
        playlists = {}
        playlist_types = ['playlist1', 'playlist2', 'playlist3', 'playlist4']
        
        for playlist_type in playlist_types:
            print(f"\nConfiguring {playlist_type}:")
            
            playlist_id = input(f"Enter {playlist_type} ID (or press Enter to skip): ").strip()
            if not playlist_id:
                continue
            
            try:
                size = int(input(f"Enter {playlist_type} size (default 50): ").strip() or "50")
            except ValueError:
                size = 50
            
            schedule = input(f"Enter {playlist_type} schedule (cron format, default '0 4 * * *'): ").strip()
            if not schedule:
                schedule = "0 4 * * *"
            
            playlists[playlist_type] = {
                'id': playlist_id,
                'size': size,
                'schedule_cron': schedule,
                'active': True
            }
        
        # Step 5: Save Configuration
        print("\nüíæ Step 5: Save Configuration")
        print("-" * 40)
        
        # Save environment variables
        env_vars = {
            'SPOTIFY_CLIENT_ID': client_id,
            'SPOTIFY_CLIENT_SECRET': client_secret,
            'SPOTIFY_REFRESH_TOKEN': refresh_token,
            'SPOTIFY_USER_ID': user_id,
            'TZ': 'America/New_York',
            'LOG_LEVEL': 'INFO'
        }
        
        if self._save_env(env_vars):
            print("‚úÖ Environment variables saved")
        else:
            print("‚ùå Failed to save environment variables")
            return False
        
        # Save configuration
        config = {
            'persona': {
                'name': bot_name,
                'prefix': bot_prefix,
                'bio': bot_bio
            },
            'playlists': playlists,
            'scoring': {
                'weights': {
                    'popularity': 0.55,
                    'popularity_delta': 0.30,
                    'recency_boost': 0.10,
                    'audio_feature_fit': 0.05
                }
            },
            'genres': {
                'buckets': {
                    'Pop': ['pop', 'indie pop', 'dance pop'],
                    'HipHop': ['hip hop', 'rap', 'trap'],
                    'Rock': ['rock', 'alternative rock', 'indie rock'],
                    'Electronic': ['electronic', 'edm', 'house'],
                    'R&B': ['r&b', 'soul', 'funk']
                }
            }
        }
        
        if self._save_config(config):
            print("‚úÖ Configuration saved")
        else:
            print("‚ùå Failed to save configuration")
            return False
        
        print("\nüéâ Setup Complete!")
        print("Your Spotify bot is now configured and ready to use.")
        print("\nNext steps:")
        print("1. Test the bot: spotify-cli test")
        print("2. Start the bot: spotify-cli start")
        print("3. View dashboard: spotify-cli dashboard")
        
        return True
    
    def _generate_refresh_token(self, client_id: str, client_secret: str) -> Optional[str]:
        """Generate a refresh token using the authentication script."""
        try:
            print("Opening browser for Spotify authorization...")
            
            # Run the authentication script
            script_path = os.path.join(os.path.dirname(__file__), '..', 'scripts', 'get_spotify_token.py')
            
            if not os.path.exists(script_path):
                print("‚ùå Authentication script not found")
                return None
            
            # Set environment variables for the script
            env = os.environ.copy()
            env['SPOTIFY_CLIENT_ID'] = client_id
            env['SPOTIFY_CLIENT_SECRET'] = client_secret
            
            # Run the script
            result = subprocess.run([sys.executable, script_path], 
                                  env=env, capture_output=True, text=True)
            
            if result.returncode == 0:
                # Extract refresh token from output
                for line in result.stdout.split('\n'):
                    if 'refresh_token' in line.lower():
                        # Parse the refresh token from the output
                        # This is a simplified approach - in practice, you'd want more robust parsing
                        return line.split('=')[-1].strip()
            
            print("‚ùå Failed to generate refresh token automatically")
            return None
            
        except Exception as e:
            print(f"‚ùå Error generating refresh token: {e}")
            return None
    
    def test_connection(self):
        """Test Spotify connection and configuration."""
        print("üß™ Testing Spotify Bot Connection")
        print("=" * 40)
        
        # Test environment variables
        env_vars = self._load_env()
        required_vars = ['SPOTIFY_CLIENT_ID', 'SPOTIFY_CLIENT_SECRET', 'SPOTIFY_REFRESH_TOKEN', 'SPOTIFY_USER_ID']
        
        missing_vars = [var for var in required_vars if var not in env_vars or not env_vars[var]]
        if missing_vars:
            print(f"‚ùå Missing environment variables: {', '.join(missing_vars)}")
            return False
        
        print("‚úÖ Environment variables loaded")
        
        # Test Spotify connection
        try:
            if self.spotify_client:
                user_profile = self.spotify_client.get_user_profile()
                if user_profile:
                    print(f"‚úÖ Connected to Spotify as: {user_profile.get('display_name', 'Unknown')}")
                else:
                    print("‚ùå Failed to get user profile")
                    return False
            else:
                print("‚ùå Spotify client not initialized")
                return False
        except Exception as e:
            print(f"‚ùå Spotify connection failed: {e}")
            return False
        
        # Test configuration
        if not self.config:
            print("‚ùå Configuration not loaded")
            return False
        
        print("‚úÖ Configuration loaded")
        
        # Test playlists
        playlists = self.config.get('playlists', {})
        if not playlists:
            print("‚ö†Ô∏è  No playlists configured")
        else:
            print(f"‚úÖ {len(playlists)} playlists configured")
            
            for playlist_key, playlist_config in playlists.items():
                playlist_id = playlist_config.get('id', '')
                if playlist_id and not playlist_id.startswith('your-'):
                    try:
                        playlist = self.spotify_client.get_playlist(playlist_id)
                        if playlist:
                            print(f"  ‚úÖ {playlist_key}: {playlist.get('name', 'Unknown')}")
                        else:
                            print(f"  ‚ùå {playlist_key}: Failed to access playlist")
                    except Exception as e:
                        print(f"  ‚ùå {playlist_key}: Error - {e}")
                else:
                    print(f"  ‚ö†Ô∏è  {playlist_key}: Not configured")
        
        print("\nüéâ All tests passed! Your bot is ready to run.")
        return True
    
    def start_bot(self, background: bool = False):
        """Start the Spotify bot."""
        print("üöÄ Starting Spotify Bot")
        print("=" * 30)
        
        if not self.test_connection():
            print("‚ùå Connection test failed. Please fix the issues above.")
            return False
        
        try:
            if background:
                print("Starting bot in background...")
                # Use subprocess to start the bot in background
                script_path = os.path.join(os.path.dirname(__file__), '..', 'app', 'main.py')
                subprocess.Popen([sys.executable, script_path], 
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                print("‚úÖ Bot started in background")
                print("Check logs with: spotify-cli logs")
            else:
                print("Starting bot in foreground...")
                script_path = os.path.join(os.path.dirname(__file__), '..', 'app', 'main.py')
                subprocess.run([sys.executable, script_path])
            
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to start bot: {e}")
            return False
    
    def stop_bot(self):
        """Stop the Spotify bot."""
        print("üõë Stopping Spotify Bot")
        print("=" * 30)
        
        try:
            # Find and kill the bot process
            result = subprocess.run(['pkill', '-f', 'app/main.py'], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Bot stopped")
            else:
                print("‚ö†Ô∏è  No bot process found or already stopped")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to stop bot: {e}")
            return False
    
    def show_status(self):
        """Show current bot status."""
        print("üìä Spotify Bot Status")
        print("=" * 30)
        
        # Bot status
        try:
            conn = sqlite3.connect(self.db_path)
            
            # Get latest run
            latest_run = conn.execute("""
                SELECT * FROM bot_runs 
                ORDER BY start_time DESC 
                LIMIT 1
            """).fetchone()
            
            if latest_run:
                print(f"Last Run: {latest_run[2]}")
                print(f"Status: {latest_run[4]}")
                print(f"Playlist: {latest_run[1]}")
                print(f"Tracks Added: {latest_run[5]}")
                print(f"Tracks Removed: {latest_run[6]}")
            else:
                print("No runs recorded yet")
            
            # Get recent activity
            recent_runs = conn.execute("""
                SELECT status, COUNT(*) as count 
                FROM bot_runs 
                WHERE start_time >= datetime('now', '-24 hours')
                GROUP BY status
            """).fetchall()
            
            if recent_runs:
                print("\nLast 24 Hours:")
                for status, count in recent_runs:
                    print(f"  {status}: {count}")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå Error getting status: {e}")
        
        # Configuration status
        print(f"\nConfiguration:")
        print(f"  Bot Name: {self.config.get('persona', {}).get('name', 'Not set')}")
        print(f"  Playlists: {len(self.config.get('playlists', {}))}")
        
        # Spotify connection
        if self.spotify_client:
            print("  Spotify: Connected")
        else:
            print("  Spotify: Disconnected")
    
    def show_logs(self, lines: int = 50, follow: bool = False):
        """Show bot logs."""
        log_file = os.path.join(os.path.dirname(__file__), '..', 'logs', 'spotify_bot.log')
        
        if not os.path.exists(log_file):
            print("‚ùå Log file not found")
            return False
        
        try:
            if follow:
                print(f"üìù Following logs (last {lines} lines):")
                print("=" * 50)
                # Use tail -f for following logs
                subprocess.run(['tail', '-f', '-n', str(lines), log_file])
            else:
                print(f"üìù Last {lines} log lines:")
                print("=" * 50)
                with open(log_file, 'r') as f:
                    log_lines = f.readlines()[-lines:]
                    for line in log_lines:
                        print(line.rstrip())
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error reading logs: {e}")
            return False
    
    def update_playlist(self, playlist_type: str):
        """Update a specific playlist."""
        print(f"üîÑ Updating {playlist_type}")
        print("=" * 30)
        
        try:
            # Import and run the update
            from app.main import SpotifyBot
            bot = SpotifyBot()
            bot.run_manual_update(playlist_type)
            print(f"‚úÖ {playlist_type} updated successfully")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to update {playlist_type}: {e}")
            return False
    
    def show_config(self):
        """Show current configuration."""
        print("‚öôÔ∏è  Current Configuration")
        print("=" * 30)
        
        print("Persona:")
        persona = self.config.get('persona', {})
        print(f"  Name: {persona.get('name', 'Not set')}")
        print(f"  Prefix: {persona.get('prefix', 'Not set')}")
        print(f"  Bio: {persona.get('bio', 'Not set')}")
        
        print("\nPlaylists:")
        playlists = self.config.get('playlists', {})
        for playlist_key, playlist_config in playlists.items():
            print(f"  {playlist_key}:")
            print(f"    ID: {playlist_config.get('id', 'Not set')}")
            print(f"    Size: {playlist_config.get('size', 'Not set')}")
            print(f"    Schedule: {playlist_config.get('schedule_cron', 'Not set')}")
            print(f"    Active: {playlist_config.get('active', False)}")
    
    def edit_config(self):
        """Edit configuration interactively."""
        print("‚úèÔ∏è  Edit Configuration")
        print("=" * 30)
        
        # Load current config
        config = self.config.copy()
        
        # Edit persona
        print("\nü§ñ Bot Persona:")
        name = input(f"Name ({config.get('persona', {}).get('name', 'Not set')}): ").strip()
        if name:
            config.setdefault('persona', {})['name'] = name
        
        prefix = input(f"Prefix ({config.get('persona', {}).get('prefix', 'Not set')}): ").strip()
        if prefix:
            config.setdefault('persona', {})['prefix'] = prefix
        
        bio = input(f"Bio ({config.get('persona', {}).get('bio', 'Not set')}): ").strip()
        if bio:
            config.setdefault('persona', {})['bio'] = bio
        
        # Edit playlists
        print("\nüìã Playlists:")
        playlists = config.get('playlists', {})
        for playlist_key in list(playlists.keys()):
            print(f"\n{playlist_key}:")
            playlist_config = playlists[playlist_key]
            
            playlist_id = input(f"  ID ({playlist_config.get('id', 'Not set')}): ").strip()
            if playlist_id:
                playlist_config['id'] = playlist_id
            
            try:
                size = input(f"  Size ({playlist_config.get('size', 'Not set')}): ").strip()
                if size:
                    playlist_config['size'] = int(size)
            except ValueError:
                pass
            
            schedule = input(f"  Schedule ({playlist_config.get('schedule_cron', 'Not set')}): ").strip()
            if schedule:
                playlist_config['schedule_cron'] = schedule
        
        # Save configuration
        if self._save_config(config):
            print("\n‚úÖ Configuration updated")
            self.config = config
        else:
            print("\n‚ùå Failed to update configuration")
    
    def dashboard(self):
        """Open the web dashboard."""
        print("üåê Opening Web Dashboard")
        print("=" * 30)
        
        try:
            # Start the dashboard
            dashboard_script = os.path.join(os.path.dirname(__file__), 'web_dashboard.py')
            if os.path.exists(dashboard_script):
                print("Starting dashboard...")
                webbrowser.open('http://localhost:5000')
                subprocess.run([sys.executable, dashboard_script])
            else:
                print("‚ùå Dashboard script not found")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to start dashboard: {e}")
            return False

def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description='Spotify App Agent Template CLI',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  spotify-cli setup          # Interactive setup wizard
  spotify-cli test           # Test connection and configuration
  spotify-cli start          # Start the bot
  spotify-cli status         # Show bot status
  spotify-cli logs           # Show recent logs
  spotify-cli logs -f        # Follow logs in real-time
  spotify-cli update playlist1  # Update specific playlist
  spotify-cli config         # Show current configuration
  spotify-cli edit           # Edit configuration interactively
  spotify-cli dashboard      # Open web dashboard
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Setup command
    subparsers.add_parser('setup', help='Interactive setup wizard')
    
    # Test command
    subparsers.add_parser('test', help='Test connection and configuration')
    
    # Start command
    start_parser = subparsers.add_parser('start', help='Start the bot')
    start_parser.add_argument('-b', '--background', action='store_true', 
                             help='Start in background')
    
    # Stop command
    subparsers.add_parser('stop', help='Stop the bot')
    
    # Status command
    subparsers.add_parser('status', help='Show bot status')
    
    # Logs command
    logs_parser = subparsers.add_parser('logs', help='Show bot logs')
    logs_parser.add_argument('-n', '--lines', type=int, default=50,
                            help='Number of lines to show')
    logs_parser.add_argument('-f', '--follow', action='store_true',
                            help='Follow logs in real-time')
    
    # Update command
    update_parser = subparsers.add_parser('update', help='Update specific playlist')
    update_parser.add_argument('playlist', help='Playlist type to update')
    
    # Config command
    subparsers.add_parser('config', help='Show current configuration')
    
    # Edit command
    subparsers.add_parser('edit', help='Edit configuration interactively')
    
    # Dashboard command
    subparsers.add_parser('dashboard', help='Open web dashboard')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # Initialize CLI
    cli = SpotifyCLI()
    
    # Execute command
    if args.command == 'setup':
        cli.setup_interactive()
    elif args.command == 'test':
        cli.test_connection()
    elif args.command == 'start':
        cli.start_bot(args.background)
    elif args.command == 'stop':
        cli.stop_bot()
    elif args.command == 'status':
        cli.show_status()
    elif args.command == 'logs':
        cli.show_logs(args.lines, args.follow)
    elif args.command == 'update':
        cli.update_playlist(args.playlist)
    elif args.command == 'config':
        cli.show_config()
    elif args.command == 'edit':
        cli.edit_config()
    elif args.command == 'dashboard':
        cli.dashboard()

if __name__ == '__main__':
    main()
